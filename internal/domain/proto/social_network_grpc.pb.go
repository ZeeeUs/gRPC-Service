// Code generated by protoc-api-go-grpc. DO NOT EDIT.
// versions:
// - protoc-api-go-grpc v1.3.0
// - protoc             v3.21.12
// source: internal/domain/proto/social_network.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SocialNetwork_CreateAccount_FullMethodName = "/SocialNetwork/CreateAccount"
)

// SocialNetworkClient is the client API for SocialNetwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialNetworkClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
}

type socialNetworkClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialNetworkClient(cc grpc.ClientConnInterface) SocialNetworkClient {
	return &socialNetworkClient{cc}
}

func (c *socialNetworkClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, SocialNetwork_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialNetworkServer is the server API for SocialNetwork service.
// All implementations must embed UnimplementedSocialNetworkServer
// for forward compatibility
type SocialNetworkServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	mustEmbedUnimplementedSocialNetworkServer()
}

// UnimplementedSocialNetworkServer must be embedded to have forward compatible implementations.
type UnimplementedSocialNetworkServer struct {
}

func (UnimplementedSocialNetworkServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedSocialNetworkServer) mustEmbedUnimplementedSocialNetworkServer() {}

// UnsafeSocialNetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialNetworkServer will
// result in compilation errors.
type UnsafeSocialNetworkServer interface {
	mustEmbedUnimplementedSocialNetworkServer()
}

func RegisterSocialNetworkServer(s grpc.ServiceRegistrar, srv SocialNetworkServer) {
	s.RegisterService(&SocialNetwork_ServiceDesc, srv)
}

func _SocialNetwork_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialNetworkServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialNetwork_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialNetworkServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialNetwork_ServiceDesc is the grpc.ServiceDesc for SocialNetwork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialNetwork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SocialNetwork",
	HandlerType: (*SocialNetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _SocialNetwork_CreateAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/domain/proto/social_network.proto",
}
